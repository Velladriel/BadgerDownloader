import argparse
import os
import logging


from playwright.sync_api import sync_playwright
from dotenv import load_dotenv

target_dir = "/app/cookies/cookies.txt"

logFormatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
logger = logging.getLogger()

fileHandler = logging.FileHandler("cookie_generator.log")
fileHandler.setFormatter(logFormatter)
logger.addHandler(fileHandler)
fileHandler.setFormatter(logFormatter)
logger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)

logger.setLevel(logging.INFO)

load_dotenv()
GOOGLE_EMAIL = os.getenv("GOOGLE_EMAIL")
GOOGLE_PW = os.getenv("GOOGLE_PW")

parser = argparse.ArgumentParser(description='Generate cookies for YouTube')
parser.add_argument('-m', '--manual', action='store_false', help='Run browser in manual mode')
args = parser.parse_args()
HEADLESS = args.manual

if not HEADLESS:
    Headless = False


def save_cookies_to_file(cookies, filename="cookies.txt"):
    """Save cookies to a Netscape-format cookies.txt file."""
    with open(filename, 'w') as f:
        f.write("# Netscape HTTP Cookie File\n")
        f.write("# This file was generated by a script\n\n")
        for cookie in cookies:
            domain = cookie.get('domain', '')
            include_subdomains = "TRUE" if domain.startswith('.') else "FALSE"
            path = cookie.get('path', '/')
            secure = "TRUE" if cookie.get('secure', False) else "FALSE"
            expires = str(int(cookie['expires'])) if cookie['expires'] != -1 else "0"
            name = cookie.get('name', '')
            value = cookie.get('value', '')
            f.write(f"{domain}\t{include_subdomains}\t{path}\t{secure}\t{expires}\t{name}\t{value}\n")


def run(playwright):
    """
    Logs into a Google account via YouTube using Playwright, navigates to a video, and extracts cookies.

    This function automates the process of logging into a YouTube account, accessing a video page,
    and extracting cookies from the session. The extracted cookies are then saved to a specified
    target directory.

    :param playwright: The Playwright instance used for browser automation.
    :type playwright: playwright.sync_api.sync_playwright
    :return: None
    """

    logger.info("Generating cookies...")
    browser = playwright.chromium.launch(headless=HEADLESS)
    context = browser.new_context()
    page = context.new_page()

    logger.info("Trying to log in")
    #Logging in here
    try:
        page.goto(
            "https://accounts.google.com/InteractiveLogin/signinchooser?continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Faction_handle_signin%3Dtrue%26app%3Ddesktop%26hl%3Dde%26next%3Dhttps%253A%252F%252Fwww.youtube.com%252F&ec=65620&hl=de&passive=true&service=youtube&uilel=3&ifkv=ASSHykpvvV-AOLdbUnBPRh9GECaTqKrYs-FTv4n5UEtYpnFM1L6to7ktLDmJQYA4cSkImYO6SjeD&ddm=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin")
        page.wait_for_selector('input[type="email"]')
        page.fill('input[type="email"]', GOOGLE_EMAIL)

        try:
            page.get_by_role("button", name="Weiter").click()
        except Exception as e:
            logger.error(f"Couldn't find button 'weiter':{e}")
            page.get_by_role("button", name="Next").click()

        page.wait_for_selector('input[type="password"]')
        page.fill('input[type="password"]', GOOGLE_PW)

        try:
            page.get_by_role("button", name="Weiter").click()
        except Exception as e:
            logger.error(f"Couldn't find button 'weiter':{e}")
            page.get_by_role("button", name="Next").click()

        page.wait_for_url("https://www.youtube.com")


    except Exception as e:
        logger.critical(f"Error logging in: {e}")
        exit(0)

    #Trying to get a video and extrack cookies
    logger.info("Starting video and extract cookies...")
    try:
        page.goto("https://www.youtube.com/watch?v=-fCtvurGDD8")

        page.wait_for_selector("video", state="visible", timeout=30000)
        page.wait_for_timeout(2000)

        cookies = context.cookies()

        save_cookies_to_file(cookies, target_dir)
        logger.info(f"Cookies saved to {target_dir}")
    except Exception as e:
        logger.critical(f"Couldn't save cookies: {e}")
        exit(0)


    browser.close()

with sync_playwright() as p:

    run(p)